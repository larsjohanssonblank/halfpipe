#! /bin/bash

# Script to generate K8s yaml for a HalfPipe pipe definition. This comprises:
# - a configMap for the pipe definition
# - a job to ensure completion of the pipe
# - a service to access HalfPipe web server while the job is in progress

set -e
script_dir=$(dirname "$0")
k8s_job_template_yaml=${script_dir}/template/template-job-pipe.yaml
generate_connections_script=${script_dir}/template/generate-k8s-connections.sh
default_halfpipe_tag="<export HP_VERSION to set>"
default_halfpipe_image_tag="halfpipe:${HP_VERSION:-${default_halfpipe_tag}}"
secrets=1  # enable deployment of connections by default

debug() {
    if [[ "$debug" -eq 1 ]]; then
        echo $1
    fi
}

my_eval() {
    if [[ "$debug" -eq 1 ]]; then
        echo $1
    else
        eval $1
    fi
}

usage() {
    echo $1
    echo
    echo "Usage: $0 -p <pipe-definition-yaml-file> [-a] [-d] [-s] [-v] [-t <image:tag>]" 1>&2
    echo ""
    echo "   Script to output a Kubernetes configMap and job that will run the "
    echo "   supplied Halfpipe pipe (yaml) file."
    echo ""
    echo "   - Use -p to supply the HalfPipe pipe .yaml file"
    echo "   - Use -a to 'kubectl apply' the yaml generated by this script to your current cluster (or use kubectl yourself)"
    echo "   - Use -d to 'kubectl delete' the yaml generated by this script from your current cluster (or use kubectl yourself)"
    echo "   - Use -s to DISABLE deployment of HalfPipe connections to a Kubernetes secret (see ${generate_connections_script})"
    echo "   - Use -t to override the Docker image:tag for Halfpipe (default: $default_halfpipe_image_tag)"
    echo "   - Use -v to enable debug output"
    echo ""
    echo "   See the Halfpipe '-o' flag available in commands like 'cp' and 'sync' to generate the required definition file"
    echo "   Capture the output of this script in source control or, to deploy directly to your cluster, use the -a flag"
    echo "   Note that the name of the supplied definition file becomes the Kubernetes job name"
    echo
    exit 1
}

while getopts ":p:adst:v" o; do
    case "${o}" in
        p)
            pipe_file_name=${OPTARG};;
        a)
            apply=1;;
        d)
            delete=1;;
        s)
            secrets=0;;
        t)
            halfpipe_image_tag=${OPTARG};;
        v)
            debug=1;;
        *)
            usage "Error: bad arguments";;
    esac
done
shift $((OPTIND-1))

# Validate args.

if [[ "$pipe_file_name" == "" || ! -f "$pipe_file_name" ]]; then
    usage "Error: please supply a valid pipe definition file"
fi

# Validate the file is .yaml.

pipe_file_yaml_suffix=$(echo "${pipe_file_name}" | perl -ne 's/.+(\.yaml)$/$1/; print')
if [[ ! "$pipe_file_yaml_suffix" == ".yaml" ]] ; then
    usage "Error: the supplied pipe definition file must be a .yaml file"
fi

# Validate the Halfpipe image:tag.

if [[ "$HP_VERSION" == "" && "${halfpipe_image_tag}" == "" ]]; then  # if the environment variable HP_VERSION is not set and an image_tag is not supplied...
  echo "Error: missing Halfpipe image tag: please set HP_VERSION to a valid Halfpipe Docker image tag OR use the -t flag to override defaults"
  exit 1
fi

if [[ "${halfpipe_image_tag}" == "" ]]; then  # if we should use the default image:tag...
  halfpipe_image_tag="${default_halfpipe_image_tag}"
fi

# Set up variables.

pipe_name_no_spaces=$(basename "${pipe_file_name}" | sed -e "s/[[:blank:]]//" | sed -e "s/.yaml$//")
debug "Creating Kubernetes job \"${pipe_name_no_spaces}\" using HalfPipe pipe definition \"${pipe_file_name}\""

if [[ "$apply" -eq 1 ]]; then  # if the user wants to deploy the job to kubernetes...
    # Include the 'kubectl apply' command.
    kubectl_apply="| kubectl apply -f -"
fi

if [[ "$delete" -eq 1 ]]; then  # if the user wants to delete the job from kubernetes...
    kubectl_apply="| kubectl delete -f -"
fi

# Build command to do replacements in the template yaml file.

cmd="cat \"${k8s_job_template_yaml}\" |
    \"${script_dir}/template/replacer.pl\" \"${pipe_file_name}\" \"pipeNameNoSpaces=${pipe_name_no_spaces},halfpipeImageTag=${halfpipe_image_tag}\"
    ${kubectl_apply}"

debug "Generated command:"
my_eval "${cmd}"

# Optionally deploy Halfpipe connections as a k8s secret.

if [[ "$secrets" -eq 1 ]]; then  # if we should deploy connections as a secret...
    cmd="${generate_connections_script} ${kubectl_apply}"
    my_eval "$cmd"
fi
